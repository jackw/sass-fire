@use "sass:list";
@use "sass:meta";
@use 'inc';
@use 'filter';

// as gross as this is there is no way that I know of to get around it. :(
$_sass-fire-inner-join-fn: '';
$_sass-fire-inner-join-list: '';

/// Takes a predicate and two lists and returns a list comprising each of
/// the elements of `a` which is equal to one or more
/// elements of `b` according to `pred`.
///
/// @group relation
/// @param {Function} pred
/// @param {Array} a
/// @param {Array} b
/// @return {Array}
/// @see intersection
///
/// @example scss - inner-join
///
///      $buffalos: inner-join(
///        (record, id) => record.id === id,
///        [{id: 824, name: 'Richie Furay'},
///         {id: 956, name: 'Dewey Martin'},
///         {id: 313, name: 'Bruce Palmer'},
///         {id: 456, name: 'Stephen Stills'},
///         {id: 177, name: 'Neil Young'}],
///        [177, 456, 999]
///      );
///      @debug $buffalos; //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]
///
@function inner-join($pred, $a, $b) {
    $_sass-fire-inner-join-fn: $pred !global;
    $_sass-fire-inner-join-list: $b !global;
    @return filter.filter(_inner-join-filter, $a);
}

@function _inner-join-filter($x) {
    @return _includes-with(
        $_sass-fire-inner-join-fn,
        $x,
        $_sass-fire-inner-join-list
    );
}

@function _includes-with($pred, $x, $list) {
    $idx: 1;
    $length: list.length($list);

    @while $idx <= $length {
        @if (meta.call(meta.get-function($pred), $x, list.nth($list, $idx))) {
            @return true;
        }
        $idx: inc.inc($idx);
    }
    @return false;
}
