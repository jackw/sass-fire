@use "sass:list";
@use "sass:map";
@use "sass:meta";
/// Takes a function and applies the function to each of the functor's values,
/// and returns a functor of the same shape.
/// sass-fire provides suitable map implementations for List and Map.
///
/// @group list
/// @param {Function} fn The function to be called on every element of the input `list`.
/// @param {Array | Object} list The list to be iterated over.
/// @return {Array | Object} The new list.
///
/// @example scss - map
///
///   @function double($number) { @return $number * 2; }
///   $double-list: map(double, [1 2 3 4 5 6 7 8 9]);
///   @debug $double-list; //=> [2 4 6 8 10 12 14 16 18]
///
///   @function double($number) { @return $number * 2; }
///   $double-obj: map(double, (x: 1, y: 2, z: 3));
///   @debug $double-obj; //=> (x: 2, y: 4, z: 6)
///

@function map($function, $list) {
    $accumulator: ();

    @if meta.type-of($list) == 'map' {
        @each $key, $value in $list {
            $accumulator: map.merge(
                $accumulator,
                (
                    $key: meta.call(meta.get-function($function), $value),
                )
            );
        }
    } @else {
        @for $i from 1 through list.length($list) {
            $item: list.nth($list, $i);
            $accumulator: list.append(
                $accumulator,
                meta.call(meta.get-function($function), $item)
            );
        }
    }
    @return $accumulator;
}
