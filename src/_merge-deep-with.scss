@import 'merge-deep-with-key';

// as gross as this is there is no way that I know of to get around it. :(
$_sass-fire-merge-deep-with-fn: '';

/// Creates a new object with the own properties of the two provided objects.
/// If a key exists in both objects:
/// - and both associated values are also objects then the values will be
///   recursively merged.
/// - otherwise the provided function is applied to associated values using the
///   resulting value as the new value associated with the key.
/// If a key only exists in one object, the value will be associated with the key
/// of the resulting object.
///
/// @group object
/// @param {Function} fn function to call when two keys match
/// @param {Object} l-obj left object
/// @param {Object} r-obj right object
/// @return {Object} merged object
///
/// @see merge-deep-with-key
/// @see merge-with
///
/// @example scss - merge-deep-with
///
///   $merge-objs: merge-deep-with(concat,
///     ( a: true, c: ( thing: 'foo', values: [10, 20] ))
///     ( b: true, c: ( thing: 'bar', values: [15, 35] ))
///   );
///   @debug $merge-objs; //=> ( a: true, b: true, c: ( thing: 'bar', values: [10, 20, 15, 35] ))

@function merge-deep-with($fn, $l-obj, $r-obj) {
    $_sass-fire-merge-deep-with-fn: $fn !global;
    @return merge-deep-with-key(
        _sass-fire-merge-deep-with-caller,
        $l-obj,
        $r-obj
    );
}

// calls the passed in merge-with function without key
@function _sass-fire-merge-deep-with-caller($k, $l-val, $r-val) {
    @return call(get-function($_sass-fire-merge-deep-with-fn), $l-val, $r-val);
}
